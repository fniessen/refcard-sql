#!/usr/bin/env bash
#? restoredb, Time-stamp: <2023-08-25 Fri 08:56>
#? Copyright (C) 2020 Fabrice Niessen
#?
#? License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>.
#? This is free software: you are free to change and redistribute it.
#? There is NO WARRANTY, to the extent permitted by law.

##? Usage: restoredb [options] BACKUP_PATH DB_NAME
##?
##? Restore DB.
##?
##? Arguments:
##?   BACKUP_PATH                   path to backup file
##?   DB_NAME                       database name
##?
##? Options:
##?   -h, --help                    display this help and exit
##?   -V, --version                 display version information and exit
##?
##? Example:
##?   restoredb "D:/Dev/BAK/MSSQL/20190211_DB.bak" "20190211_DB"

usage() {
    cat << EOF 1>&2
Usage: $SCRIPT_NAME BACKUP_PATH DB_NAME
EOF
    exit 2
}

SCRIPT_NAME=$(basename "$0")
BACKUP_PATH=$1
DB_NAME=$2

if [[ $# -ne 2 ]]; then
    usage
fi

echo "Backup Path:   $BACKUP_PATH"
echo "DB Name:       $DB_NAME"

read -p "Are you sure? " -n 1 -r
echo                                    # Move to a new line.
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    exit 1
fi

( cd "$(dirname "$0")" || exit

# If BACKUP_PATH ends with ".bak"
    # Use sqlcmd with scripting variables.
    bakPath="$BACKUP_PATH" \
        sqlcmd.exe -E -S localhost -b -i restorebak.sql -v dbName = "$DB_NAME" \
        || { echo "$SCRIPT_NAME: Command exited with a non-zero status" > /dev/stderr; exit 2; }
    #! In order to NOT interpret the colon in bakPath ("D:\...") as a command,
    #! pass it as an environment variable.

    # Or inlined?  https://stackoverflow.com/questions/17575321/how-to-pass-variable-from-shell-script-to-sqlplus
# Else if BACKUP_PATH ends with ".mdf"
# ...
)
