#!/usr/bin/env bash
usage() {
    cat << EOF 1>&2
Usage: $SCRIPT_NAME DUMP_FILE AFM_SCHEMA
EOF
    exit 2
}

SCRIPT_NAME=$(basename "$0")
DUMP_FILE=$1
AFM_SCHEMA=$2
AFM_SECURE_SCHEMA=$2_SECURE

DBAUSER="system"
DBAPASS="iamadba"
HOSTSTRING="ORCL1252"
ROOT="D:\app\f.niessen\oradata\\$HOSTSTRING"
ADMINROOT="D:\app\f.niessen\admin\\$HOSTSTRING"
# See regedit for variable names.

if [[ $# -ne 2 ]]; then
    usage
fi

echo "Dump File:           $DUMP_FILE"
if [ ! -f "$ADMINROOT"/dpdump/"$DUMP_FILE" ]; then
    echo >&2 "Dump File $ADMINROOT/dpdump/$DUMP_FILE not found!"
    exit 2
fi
echo "AFM Schema:          $AFM_SCHEMA"
echo "AFM_SECURE Schema:   $AFM_SECURE_SCHEMA"
echo "@Database:           $HOSTSTRING"

read -p "Are you sure? " -n 1 -r
echo                                    # Move to a new line.
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    exit 1
fi

# 1.
printf '\nINFO- Before imp...\n'
sqlplus -s /nolog <<EOF
-- Connect to the instance.
CONNECT $DBAUSER/$DBAPASS@$HOSTSTRING;

WHENEVER OSERROR EXIT FAILURE
WHENEVER SQLERROR EXIT SQL.SQLCODE
-- No log visible.

-- List each command in a script as the command is executed.
SET ECHO ON
SET FEEDBACK OFF

SET SERVEROUTPUT ON SIZE UNLIMITED

-- Don't print column headings in reports.
SET HEADING OFF

-- Drop the user $AFM_SECURE_SCHEMA if it exists!
DECLARE
    user_exists INTEGER;
BEGIN
    SELECT COUNT(*)
    INTO user_exists
    FROM dba_users
    WHERE username = UPPER('$AFM_SECURE_SCHEMA');
    IF (user_exists = 1) THEN
        dbms_output.put_line('INFO- User $AFM_SECURE_SCHEMA already exists -- Drop it!');
        EXECUTE IMMEDIATE 'DROP USER $AFM_SECURE_SCHEMA CASCADE';
    END IF;
END;
/

-- Drop the user $AFM_SCHEMA if it exists!
DECLARE
    user_exists INTEGER;
BEGIN
    SELECT COUNT(*)
    INTO user_exists
    FROM dba_users
    WHERE username = UPPER('$AFM_SCHEMA');
    IF (user_exists = 1) THEN
        dbms_output.put_line('INFO- User $AFM_SCHEMA already exists -- Drop it!');
        EXECUTE IMMEDIATE 'DROP USER $AFM_SCHEMA CASCADE';
    END IF;
END;
/

-- ERROR if it does not exist...
-- DROP TABLESPACE TBS_$AFM_SCHEMA INCLUDING CONTENTS AND DATAFILES;

-- -- XXX It seems to create the TBS in all cases!
-- DECLARE
--     tbs_exists NUMBER;
-- BEGIN
--     SELECT COUNT(*)
--     INTO tbs_exists
--     FROM dba_tablespaces
--     WHERE tablespace_name = 'TBS_$AFM_SCHEMA';
--     IF (tbs_exists = 0) THEN
--         -- Create a Basic Tablespace.
--         EXECUTE IMMEDIATE 'CREATE TABLESPACE TBS_$AFM_SCHEMA DATAFILE ''$ROOT\DATAFILE\tbs_${AFM_SCHEMA}_data.dbf'' SIZE 500M AUTOEXTEND ON';
--     END IF;
-- END;
-- /



-- SELECT tablespace_name
-- FROM dba_tablespaces
-- WHERE tablespace_name = 'TBS_${AFM_SCHEMA}';
--
-- DECLARE
--     tbs_exists DBA_TABLESPACES.tablespace_name%type;
--     tbs_name DBA_TABLESPACES.tablespace_name%type;
-- BEGIN
--     BEGIN
--         tbs_name := 'TBS_${AFM_SCHEMA}';
--         SELECT tablespace_name
--         INTO tbs_exists
--         FROM dba_tablespaces
--         WHERE tablespace_name = tbs_name;
--     EXCEPTION
--         WHEN NO_DATA_FOUND THEN
--             dbms_output.put_line(tbs_exists);
--             -- Create a Basic Tablespace.
--             dbms_output.put_line('.......... tbs: tbs_name');
--             dbms_output.put_line('... EXECUTE IMMEDIATE CREATE TABLESPACE tbs_name DATAFILE $ROOT\DATAFILE\tbs_${AFM_SCHEMA}_data.dbf SIZE 500M AUTOEXTEND ON ...');
--             EXECUTE IMMEDIATE 'CREATE TABLESPACE tbs_name DATAFILE ''$ROOT\DATAFILE\tbs_${AFM_SCHEMA}_data.dbf'' SIZE 500M AUTOEXTEND ON';
--     END;
--
--     BEGIN
--         SELECT tablespace_name
--         INTO tbs_exists
--         FROM dba_tablespaces
--         WHERE tablespace_name = 'TBS_${AFM_SCHEMA}_DOCMGMT_BLOB';
--     EXCEPTION
--         WHEN NO_DATA_FOUND THEN
--             -- Create a Basic Tablespace.
--             EXECUTE IMMEDIATE 'CREATE TABLESPACE TBS_$AFM_SCHEMA DATAFILE ''$ROOT\DATAFILE\tbs_${AFM_SCHEMA}_docmgmt_blob.dbf'' SIZE 500M AUTOEXTEND ON';
--     END;
-- END;
-- /


DECLARE
    PROCEDURE create_tablespace(p_tablespace_name DBA_TABLESPACES.tablespace_name%type)
    AS
        tbs_exists DBA_TABLESPACES.tablespace_name%type;
        cmd varchar2(1024);
    BEGIN
        SELECT tablespace_name
        INTO tbs_exists
        FROM dba_tablespaces
        WHERE tablespace_name = UPPER(p_tablespace_name);
        dbms_output.put_line('* tablespace [' || tbs_exists || '] already exists');
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            cmd := 'CREATE TABLESPACE ' || p_tablespace_name || ' DATAFILE ''$ROOT\DATAFILE\' || p_tablespace_name || '.dbf'' SIZE 500M AUTOEXTEND ON';
            dbms_output.put_line('* SQL : ' || cmd);
            EXECUTE IMMEDIATE cmd;
    END;
BEGIN
    create_tablespace ('AFM_P1');
    create_tablespace ('AFMDOCMGMT_BLOB'); -- Doc Mgmt.
END;
/

-- -- Create a TEMP Tablespace.
-- CREATE TEMPORARY TABLESPACE temp
--     TEMPFILE 'temp01.dbf' SIZE 5M
--     AUTOEXTEND ON;

dbms_output.put_line('* Create afm_secure');
-- Create Database Users.
CREATE USER $AFM_SECURE_SCHEMA
    IDENTIFIED BY afm
    DEFAULT TABLESPACE AFM_P1;
--    TEMPORARY TABLESPACE TEMP;
dbms_output.put_line('* Create afm_secure');
CREATE USER $AFM_SCHEMA
    IDENTIFIED BY afm
    DEFAULT TABLESPACE AFM_P1;
--    TEMPORARY TABLESPACE TEMP;

-- XXX Test role exist
BEGIN
    execute immediate 'CREATE ROLE AFM_ROLE';
    execute immediate 'GRANT CONNECT TO AFM_ROLE';
    execute immediate 'GRANT RESOURCE TO AFM_ROLE';
    execute immediate 'GRANT EXECUTE_CATALOG_ROLE TO AFM_ROLE';
    execute immediate 'GRANT CREATE INDEXTYPE TO AFM_ROLE';
    execute immediate 'GRANT CREATE OPERATOR TO AFM_ROLE';
    execute immediate 'GRANT CREATE TYPE TO AFM_ROLE';
    execute immediate 'GRANT CREATE MATERIALIZED VIEW TO AFM_ROLE';
    execute immediate 'GRANT CREATE TRIGGER TO AFM_ROLE';
    execute immediate 'GRANT CREATE PROCEDURE TO AFM_ROLE';
    execute immediate 'GRANT CREATE SEQUENCE TO AFM_ROLE';
    execute immediate 'GRANT CREATE VIEW TO AFM_ROLE';
    execute immediate 'GRANT CREATE CLUSTER TO AFM_ROLE';
    execute immediate 'GRANT CREATE TABLE TO AFM_ROLE';
    execute immediate 'GRANT UNLIMITED TABLESPACE TO AFM_ROLE';
    execute immediate 'GRANT CREATE SESSION TO AFM_ROLE';
EXCEPTION
    WHEN OTHERS THEN NULL;
END;
/

-- Grant the role AFM_ROLE to users (avoid insufficient privileges).
GRANT AFM_ROLE TO $AFM_SECURE_SCHEMA;
GRANT AFM_ROLE TO $AFM_SCHEMA;

GRANT UNLIMITED TABLESPACE TO $AFM_SECURE_SCHEMA;
GRANT UNLIMITED TABLESPACE TO $AFM_SCHEMA;

EXIT
EOF

if [[ $? -ne 0 ]]; then
    echo >&2 "sqlplus: Command exited with a non-zero status"
    read -p "Do you want to continue? " -n 1 -r
    echo                                # Move to a new line.
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi
printf '\n--------------------------------------------------------------------------------\n\n'

# 2. Restore the backup.
printf 'INFO- Restoring Database...\n'

imp $DBAUSER/$DBAPASS@$HOSTSTRING \
    file="$ADMINROOT\dpdump\\${DUMP_FILE}" \
    log="$ADMINROOT"\dpdump\imp_"${DUMP_FILE%.*}"_"$(date '+%Y%m%d_%H%M')".log \
    fromuser="(AFM,AFM_SECURE)" touser="(AFM,AFM_SECURE)" \
    2>&1

if [[ $? -ne 0 ]]; then
    echo >&2 "imp: Command exited with a non-zero status"
    read -p "Do you want to continue? " -n 1 -r
    echo                                # Move to a new line.
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
fi
printf '\n--------------------------------------------------------------------------------\n\n'

# 3.
printf 'INFO- After imp...\n'
sqlplus -s /nolog <<EOF
WHENEVER OSERROR EXIT FAILURE
WHENEVER SQLERROR EXIT SQL.SQLCODE

-- Connect to the instance.
CONNECT $DBAUSER/$DBAPASS@$HOSTSTRING;

SET SERVEROUTPUT ON SIZE UNLIMITED

-- Don't list each command in a script as the command is executed.
SET ECHO OFF

-- Don't print column headings in reports.
SET HEADING OFF

-- Define synonyms.
CREATE OR REPLACE SYNONYM $AFM_SCHEMA.AFM_GROUPS
    FOR $AFM_SECURE_SCHEMA.AFM_GROUPS;
CREATE OR REPLACE SYNONYM $AFM_SCHEMA.AFM_USERS
    FOR $AFM_SECURE_SCHEMA.AFM_USERS;
CREATE OR REPLACE SYNONYM $AFM_SECURE_SCHEMA.AFM_ROLES
    FOR $AFM_SCHEMA.AFM_ROLES;
CREATE OR REPLACE SYNONYM $AFM_SECURE_SCHEMA.AFM_GROUPSFORROLES
    FOR $AFM_SCHEMA.AFM_GROUPSFORROLES;

-- Set passwords (change defaults).
ALTER USER $AFM_SCHEMA
    IDENTIFIED BY afm;
ALTER USER $AFM_SECURE_SCHEMA
    IDENTIFIED BY afm;

EXIT;
EOF

if [[ $? -ne 0 ]]; then
    echo >&2 "sqlplus: Command exited with a non-zero status"
    exit 2
fi
